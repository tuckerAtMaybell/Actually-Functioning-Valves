import serial
from PyQt5.QtWidgets import QWidget,QApplication
from PyQt5.QtCore import QTimer
#import the interface design generated by Qt designer

from . import Valves_Ui
import time


class Panel(QWidget):
    def __init__(self,parent=None,instr=None,lock=None,title='Instrument Panel'):
        # This class derivates from a Qt Widget so we have to call
        # the class builder ".__init__()"
        QWidget.__init__(self)
        # "self" is now a Qt Widget, then we load the user interface
        # generated with QtDesigner and call it self.ui
        self.ui = Valves_Ui.Ui_Panel()
        # Now we have to feed the GUI building method of this object (self.ui)
        # with the current Qt Widget 'self', but the widgets from the design will actually be built as children
        # of the object self.ui
        self.ui.setupUi(self)
        self.setWindowTitle(title)
        self.reserved_access_to_instr=lock
        self.instr=instr
        self.monitor_timer = QTimer()
        #The timer would not wait for the completion of the task otherwise
        self.monitor_timer.setSingleShot(True)
        self.monitor_timer.timeout.connect(self.monitor)
        self.firsttime=0
        #bug: if the box is checked in the .ui file, the system freezes
        #if self.ui.monitor.isChecked():self.monitor()

        self.vd = {
            'V1': self.ui.V1,
            'V2': self.ui.V2,
            'V3': self.ui.V3,
            'V4': self.ui.V4,
            'V5': self.ui.V5,
            'V6': self.ui.V6,
            'V7': self.ui.V7,
            'V8': self.ui.V8,
            "V9": self.ui.V9,
            "V10": self.ui.V10,
            "V11": self.ui.V11,
            "V12": self.ui.V12,
            "V13": self.ui.V13,
            "V14": self.ui.V14,
            "V15": self.ui.V15,
            "V16": self.ui.V16,
            "V17": self.ui.V17,
            "V18": self.ui.V18,
            "V19": self.ui.V19,
            "V20": self.ui.V20,
            "V21": self.ui.V21,
            "V22": self.ui.V22,
            "V23": self.ui.V23,
            "V24": self.ui.V24,
            # 'A' :self.ui.V1,
            # 'B' : self.ui.V2,
            # 'C' : self.ui.V3,
            # 'D' : self.ui.V4,
            # 'E' : self.ui.V5,
            # 'F' : self.ui.V6,
            # 'G' : self.ui.V7,
            # 'H' : self.ui.V8,
            # "I" : self.ui.V9,
            # "J" :self.ui.V10,
            # "K" :self.ui.V11,
            # "L" :self.ui.V12,
            # "M": self.ui.V13,
            # "N": self.ui.V14,
            # "O": self.ui.V15,
            # "P": self.ui.V16,
            # "Q": self.ui.V17,
            # "R": self.ui.V18,
            # "S": self.ui.V19,
            # "T": self.ui.V20,
            # "U": self.ui.V21,
            # "V": self.ui.V22,
            # "W": self.ui.V23,
            # "X": self.ui.V24,
            # "V25": self.ui.V25,
            # "V26": self.ui.V26,
            # "V27": self.ui.V27,
            # "V28": self.ui.V28,
            # "V29": self.ui.V29,
            # "V30": self.ui.V30,
            # "V31": self.ui.V31,
        }

        self.vd_Dict = {
            '0': self.ui.V1,
            '1': self.ui.V2,
            '2': self.ui.V3,
            '3': self.ui.V4,
            '4': self.ui.V5,
            '5': self.ui.V6,
            '6': self.ui.V7,
            '7': self.ui.V8,
            "8": self.ui.V9,
            "9": self.ui.V10,
            "10": self.ui.V11,
            "11": self.ui.V12,
            "12": self.ui.V13,
            "13": self.ui.V14,
            "14": self.ui.V15,
            "15": self.ui.V16,
            "16": self.ui.V17,
            "17": self.ui.V18,
            "18": self.ui.V19,
            "19": self.ui.V20,
            "20": self.ui.V21,
            "21": self.ui.V22,
            "22": self.ui.V23,
            "23": self.ui.V24,
        }

        self.valve_command={
            'V1': b'A',
            'V2': b'B',
            'V3': b'C',
            'V4': b'D',
            'V5': b'E',
            'V6': b'F',
            'V7': b'G',
            'V8': b'H',
            "V9": b'I',
            "V10": b'J',
            "V11": b'K',
            "V12": b'L',
            "V13": b'M',
            "V14": b'N',
            "V15": b'O',
            "V16": b'P',
            "V17": b'Q',
            "V18": b'R',
            "V19": b'S',
            "V20": b'T',
            "V21": b'U',
            "V22": b'V',
            "V23": b'W',
            "V24": b'X',
        }


    def monitor(self,state=1):
        pass


    def check_state(self):
        id=self.sender()
        self.ui.id_name=id.objectName()
        self.valve_number_incorrected = id.objectName().strip('V')
        self.valve_number_corrected = int(self.valve_number_incorrected)+21
        self.valve_command_to_send = self.valve_command[self.ui.id_name]
        self.ui.valve_instance = self.vd[id.objectName()]
        if self.ui.valve_instance.isChecked():
            self.ui.valve_instance.setStyleSheet(("background-color:green"))
            self.instr.close_valve(self.valve_command_to_send)
        elif self.ui.valve_instance.isChecked() is False:
            self.ui.valve_instance.setStyleSheet(("background-color:red"))
            self.instr.open_valve(self.valve_command_to_send)
        time.sleep(0.5)

    def change_valve_state_GUI(self, valve_state_vector):

        # time.sleep(2)  # needed for the arduino stream to catch the transmission
        self.instr.recieve_command()
        self.instr.write_command_to_update_valves()  # need to encode the message for the pin
        time.sleep(2)
        valve_state_array = []
        i = 0

        while i < 25:
            time.sleep(0.05)
            state_unstripped = self.instr.io.readlines(2)
            state_stripped = state_unstripped[0].decode('UTF-8')
            #print(state_stripped)
            valve_state_array.append(state_stripped[0])
            i = 1 + i

        # print(valve_state_array)
        valve_state_vector=''.join(valve_state_array)



        for j in range(0,24,1):
            time.sleep(0.005)
            if str(valve_state_vector[j]) == '0':
                # print(str(j))
                # print(valve_state_vector[j])
                self.ui.id_name = self.vd_Dict[str(j)]
                #print(str(self.ui.id_name))
                self.ui.id_name.setStyleSheet(("background-color:green"))
            else:
                # print("skipped to here")
                self.ui.id_name = self.vd_Dict[str(j)]
                self.ui.id_name.setStyleSheet(("background-color:red"))
        print('Valve State\'s Verified')


if __name__ == "__main__":
    import sys
    import pyfirmata
    app = QApplication(sys.argv)
    window = Panel(app)
    window.show()

    sys.exit(app.exec_())
